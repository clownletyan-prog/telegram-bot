"""
–£–ª—É—á—à—ë–Ω–Ω—ã–π –±–æ–Ω—É—Å-–±–æ—Ç (python-telegram-bot v21.x)
- JSON-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ data/
- –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–æ–∫
- –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
- –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ MarkdownV2
- –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ bot.log
"""

import os
import json
import random
import logging
from typing import Optional, Dict, Any, List, Tuple

from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# -------------------------
# SETTINGS (replace TOKEN)
# -------------------------
TOKEN = "8404250282:AAE1imGNWceA3NggkT2Q_lSnsK16qs-vokk"  # <-- –í–°–¢–ê–í–¨ –°–Æ–î–ê –°–í–û–ô –ù–û–í–´–ô –¢–û–ö–ï–ù
ADMINS = [1176944561, 1284015566]  # —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
DATA_DIR = "data"
USERS_FILE = os.path.join(DATA_DIR, "users.json")
CODES_FILE = os.path.join(DATA_DIR, "codes.json")
LOG_FILE = "bot.log"

# —Ç–æ–≤–∞—Ä—ã (name, price)
BONUS_ITEMS: List[Tuple[str, int]] = [
    ("ü•§ –ù–∞–ø–∏—Ç–∫–∏", 100),
    ("üçü –ì–∞—Ä–Ω–∏—Ä—ã", 100),
    ("üî• –ì–æ—Ä—è—á–∏–µ –±–ª—é–¥–∞", 330),
    ("ü•ì –ó–∞–∫—É—Å–∫–∏", 300),
    ("üç≥ –ó–∞–≤—Ç—Ä–∞–∫–∏", 200),
    ("üçù –ü–∞—Å—Ç–∞", 250),
    ("üçï –ü–∏—Ü—Ü–∞", 250),
    ("üç£ –†–æ–ª–ª—ã", 300),
    ("ü•ó –°–∞–ª–∞—Ç—ã", 220),
    ("ü•© –°—Ç–µ–π–∫–∏", 360),
    ("üç≤ –°—É–ø—ã", 200),
]
ITEMS_PER_PAGE = 5

# -------------------------
# LOGGING
# -------------------------
logger = logging.getLogger("bonus_bot")
logger.setLevel(logging.INFO)
fh = logging.FileHandler(LOG_FILE, encoding="utf-8")
fh.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logger.addHandler(fh)
ch = logging.StreamHandler()
ch.setFormatter(logging.Formatter("%(asctime)s | %(levelname)s | %(message)s"))
logger.addHandler(ch)

# -------------------------
# HELPERS: file storage, escape
# -------------------------
def ensure_data_files():
    os.makedirs(DATA_DIR, exist_ok=True)
    for path in (USERS_FILE, CODES_FILE):
        if not os.path.exists(path):
            with open(path, "w", encoding="utf-8") as f:
                json.dump({}, f)


def load_json(path: str) -> Dict[str, Any]:
    try:
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return {}


def save_json(path: str, data: Dict[str, Any]):
    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2, ensure_ascii=False)


def md_escape(s: str) -> str:
    """
    –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2
    """
    if s is None:
        return ""
    to_escape = r'\_*[]()~`>#+-=|{}.!'
    res = ""
    for ch in str(s):
        if ch in to_escape:
            res += "\\" + ch
        else:
            res += ch
    return res


# balance functions
def get_balance(uid: int) -> int:
    users = load_json(USERS_FILE)
    return int(users.get(str(uid), 0))


def add_balance(uid: int, amount: int):
    users = load_json(USERS_FILE)
    users[str(uid)] = users.get(str(uid), 0) + int(amount)
    save_json(USERS_FILE, users)
    logger.info("Add balance: user=%s amount=%s new=%s", uid, amount, users[str(uid)])


def spend_balance(uid: int, amount: int) -> bool:
    users = load_json(USERS_FILE)
    cur = int(users.get(str(uid), 0))
    if cur >= amount:
        users[str(uid)] = cur - int(amount)
        save_json(USERS_FILE, users)
        logger.info("Spend: user=%s amount=%s left=%s", uid, amount, users[str(uid)])
        return True
    return False


# codes functions
def create_code(code: str, amount: int):
    codes = load_json(CODES_FILE)
    codes[code] = int(amount)
    save_json(CODES_FILE, codes)
    logger.info("Create code: %s -> %s", code, amount)


def pop_code(code: str) -> Optional[int]:
    codes = load_json(CODES_FILE)
    if code in codes:
        val = codes.pop(code)
        save_json(CODES_FILE, codes)
        logger.info("Use code: %s -> %s", code, val)
        return int(val)
    return None


def gen_code(length: int = 8) -> str:
    alphabet = "ABCDEFGHJKLMNPQRSTUVWXYZ23456789"
    return "".join(random.choices(alphabet, k=length))


# -------------------------
# UI: keyboards
# -------------------------
def main_menu_kb() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton("–ú–æ–π –±–∞–ª–∞–Ω—Å üí∞", callback_data="show_balance")],
        [InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ –∫–æ–¥ ‚û°Ô∏è", callback_data="enter_code")],
        [InlineKeyboardButton("–ë–æ–Ω—É—Å–Ω–æ–µ –º–µ–Ω—é üéÅ", callback_data="bonus_page_0")],
        [InlineKeyboardButton("–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üõ†", callback_data="open_admin")],
    ]
    return InlineKeyboardMarkup(kb)


def bonus_page_kb(page: int = 0) -> InlineKeyboardMarkup:
    start = page * ITEMS_PER_PAGE
    end = start + ITEMS_PER_PAGE
    kb = []
    for idx, (name, price) in enumerate(BONUS_ITEMS[start:end], start):
        kb.append([InlineKeyboardButton(f"{name} ‚Äî {price}", callback_data=f"want_buy_{idx}")])
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data=f"bonus_page_{page-1}"))
    if end < len(BONUS_ITEMS):
        nav.append(InlineKeyboardButton("‚ñ∂Ô∏è –î–∞–ª–µ–µ", callback_data=f"bonus_page_{page+1}"))
    if nav:
        kb.append(nav)
    kb.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main")])
    return InlineKeyboardMarkup(kb)


def buy_confirm_kb(item_idx: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"confirm_buy_{item_idx}"),
             InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel_buy")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="go_main")]
        ]
    )


def admin_kb() -> InlineKeyboardMarkup:
    kb = [
        [InlineKeyboardButton("‚ûï –°–æ–∑–¥–∞—Ç—å –∫–æ–¥ –≤—Ä—É—á–Ω—É—é", callback_data="admin_create_manual")],
        [InlineKeyboardButton("üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", callback_data="admin_generate")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_list_users")],
        [InlineKeyboardButton("‚ûï –ù–∞—á–∏—Å–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data="admin_grant_user")],
        [InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("üè† –ù–∞–∑–∞–¥", callback_data="go_main")],
    ]
    return InlineKeyboardMarkup(kb)


# -------------------------
# HANDLERS
# -------------------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ–Ω—É—Å–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )


async def cb_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    q = update.callback_query
    if not q:
        return
    uid = q.from_user.id
    data = q.data or ""

    # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ callback (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–∞—Ä—ã–º)
    try:
        await q.answer()
    except Exception:
        pass

    # MAIN
    if data == "go_main":
        try:
            await q.edit_message_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
        except Exception:
            await q.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_kb())
        return

    if data == "show_balance":
        bal = get_balance(uid)
        text = f"üí∞ –ë–∞–ª–∞–Ω—Å: *{md_escape(str(bal))}*"
        try:
            await q.edit_message_text(text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=main_menu_kb())
        except Exception:
            await q.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=main_menu_kb())
        return

    if data == "enter_code":
        context.user_data["await_code"] = True
        try:
            await q.edit_message_text("‚úèÔ∏è –ü—Ä–∏—à–ª–∏ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ABC123) ‚Äî –æ–Ω –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –±–∞–ª–∞–Ω—Å—É.")
        except Exception:
            await q.message.reply_text("‚úèÔ∏è –ü—Ä–∏—à–ª–∏ –∫–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ABC123) ‚Äî –æ–Ω –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –∫ –±–∞–ª–∞–Ω—Å—É.")
        return

    # BONUS paging
    if data.startswith("bonus_page_"):
        try:
            page = int(data.split("_")[2])
        except (IndexError, ValueError):
            page = 0
        try:
            await q.edit_message_text("üéÅ –ë–æ–Ω—É—Å–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=bonus_page_kb(page))
        except Exception:
            await q.message.reply_text("üéÅ –ë–æ–Ω—É—Å–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=bonus_page_kb(page))
        return

    # want to buy -> confirm
    if data.startswith("want_buy_"):
        try:
            idx = int(data.split("_")[2])
        except (IndexError, ValueError):
            await q.answer("–û—à–∏–±–∫–∞", show_alert=True)
            return
        name, price = BONUS_ITEMS[idx]
        msg = f"–í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å *{md_escape(name)}* –∑–∞ *{price}* –±–æ–Ω—É—Å–æ–≤?"
        try:
            await q.edit_message_text(msg, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=buy_confirm_kb(idx))
        except Exception:
            await q.message.reply_text(msg, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=buy_confirm_kb(idx))
        return

    # confirm purchase
    if data.startswith("confirm_buy_"):
        try:
            idx = int(data.split("_")[2])
            name, price = BONUS_ITEMS[idx]
        except (IndexError, ValueError):
            await q.answer("–û—à–∏–±–∫–∞", show_alert=True)
            return
        if spend_balance(uid, price):
            text = f"‚úÖ –ö—É–ø–ª–µ–Ω–æ: *{md_escape(name)}* –∑–∞ *{price}* –±–æ–Ω—É—Å–æ–≤.\nüí∞ –û—Å—Ç–∞—Ç–æ–∫: *{md_escape(str(get_balance(uid)))}*"
            try:
                await q.edit_message_text(text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=main_menu_kb())
            except Exception:
                await q.message.reply_text(text, parse_mode=ParseMode.MARKDOWN_V2, reply_markup=main_menu_kb())
        else:
            bal = get_balance(uid)
            text = f"üö´ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ (—Ç—Ä–µ–±—É–µ—Ç—Å—è: {price}, –µ—Å—Ç—å: {bal})"
            try:
                await q.edit_message_text(text, reply_markup=main_menu_kb())
            except Exception:
                await q.message.reply_text(text, reply_markup=main_menu_kb())
        return

    if data == "cancel_buy":
        try:
            await q.edit_message_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_kb())
        except Exception:
            await q.message.reply_text("–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=main_menu_kb())
        return

    # ADMIN OPEN
    if data == "open_admin":
        if uid not in ADMINS:
            try:
                await q.edit_message_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            except Exception:
                await q.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
            return
        try:
            await q.edit_message_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb())
        except Exception:
            await q.message.reply_text("üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=admin_kb())
        return

    # ADMIN: create manual
    if data == "admin_create_manual":
        if uid not in ADMINS:
            await q.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        context.user_data["admin_create_manual"] = True
        try:
            await q.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: CODE 250")
        except Exception:
            await q.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –∏ —Å—É–º–º—É —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª: CODE 250")
        return

    # ADMIN: generate random
    if data == "admin_generate":
        if uid not in ADMINS:
            await q.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        context.user_data["admin_gen_amount"] = True
        try:
            await q.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250)")
        except Exception:
            await q.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∫–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 250)")
        return

    # ADMIN: list users
    if data == "admin_list_users":
        if uid not in ADMINS:
            await q.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        users = load_json(USERS_FILE)
        if not users:
            try:
                await q.edit_message_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            except Exception:
                await q.message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        lines = [f"üÜî {md_escape(k)} ‚Äî {md_escape(str(v))}" for k, v in users.items()]
        msg = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n" + "\n".join(lines[:200])
        try:
            await q.edit_message_text(msg, parse_mode=ParseMode.MARKDOWN_V2)
        except Exception:
            await q.message.reply_text(msg)
        return

    # ADMIN: grant to user
    if data == "admin_grant_user":
        if uid not in ADMINS:
            await q.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        context.user_data["admin_grant_user"] = True
        try:
            await q.edit_message_text("–ù–∞–ø–∏—à–∏—Ç–µ: user_id amount  (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 250)")
        except Exception:
            await q.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ: user_id amount  (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 250)")
        return

    # ADMIN: broadcast
    if data == "admin_broadcast":
        if uid not in ADMINS:
            await q.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
            return
        context.user_data["admin_broadcast"] = True
        try:
            await q.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º).")
        except Exception:
            await q.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ (–±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º).")
        return

    # fallback: unknown
    await q.answer()


async def msg_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message
    if not msg or not msg.text:
        return
    uid = msg.from_user.id
    text = msg.text.strip()

    # Admin: manual create code flow
    if context.user_data.get("admin_create_manual"):
        context.user_data.pop("admin_create_manual", None)
        if uid not in ADMINS:
            await msg.reply_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        parts = text.split()
        if len(parts) != 2 or not parts[1].isdigit():
            await msg.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: MYCODE 250")
            return
        code, amt = parts[0], int(parts[1])
        create_code(code, amt)
        await msg.reply_text(f"‚úÖ –ö–æ–¥ {md_escape(code)} —Å–æ–∑–¥–∞–Ω –Ω–∞ {amt} –±–æ–Ω—É—Å–æ–≤.", parse_mode=ParseMode.MARKDOWN_V2)
        return

    # Admin: gen random code flow
    if context.user_data.get("admin_gen_amount"):
        context.user_data.pop("admin_gen_amount", None)
        if uid not in ADMINS:
            await msg.reply_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        if not text.isdigit():
            await msg.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä: 250")
            return
        amt = int(text)
        code = gen_code()
        create_code(code, amt)
        await msg.reply_text(f"üé≤ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∫–æ–¥ {md_escape(code)} –Ω–∞ {amt} –±–æ–Ω—É—Å–æ–≤.", parse_mode=ParseMode.MARKDOWN_V2)
        return

    # Admin: grant user flow
    if context.user_data.get("admin_grant_user"):
        context.user_data.pop("admin_grant_user", None)
        if uid not in ADMINS:
            await msg.reply_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        parts = text.split()
        if len(parts) != 2 or not parts[0].isdigit() or not parts[1].isdigit():
            await msg.reply_text("–§–æ—Ä–º–∞—Ç: user_id amount  (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 250)")
            return
        user_id, amt = int(parts[0]), int(parts[1])
        add_balance(user_id, amt)
        await msg.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amt} –±–æ–Ω—É—Å–æ–≤.")
        return

    # Admin: broadcast
    if context.user_data.get("admin_broadcast"):
        context.user_data.pop("admin_broadcast", None)
        if uid not in ADMINS:
            await msg.reply_text("üö´ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
            return
        users = load_json(USERS_FILE)
        count = 0
        text_to_send = text
        for user_id in list(users.keys()):
            try:
                await context.bot.send_message(int(user_id), text_to_send)
                count += 1
            except Exception as e:
                logger.warning("Broadcast failed to %s: %s", user_id, e)
        await msg.reply_text(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return

    # Redeem code flow
    if context.user_data.get("await_code"):
        context.user_data.pop("await_code", None)
        code = text
        val = pop_code(code)
        if val is not None:
            add_balance(uid, val)
            await msg.reply_text(f"‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {val} –±–æ–Ω—É—Å–æ–≤. –ë–∞–ª–∞–Ω—Å: {get_balance(uid)}",
                                 reply_markup=main_menu_kb())
        else:
            await msg.reply_text("‚ùå –ö–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.", reply_markup=main_menu_kb())
        return

    # /start shortcut
    if text == "/start":
        await cmd_start(update, context)
        return

    # admin text commands (quick)
    if text.startswith("/gen ") and uid in ADMINS:
        parts = text.split()
        if len(parts) == 3 and parts[2].isdigit():
            create_code(parts[1], int(parts[2]))
            await msg.reply_text(f"‚úÖ –ö–æ–¥ {md_escape(parts[1])} —Å–æ–∑–¥–∞–Ω –Ω–∞ {parts[2]} –±–æ–Ω—É—Å–æ–≤.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /gen CODE AMOUNT")
        return

    if text.startswith("/gen_auto ") and uid in ADMINS:
        parts = text.split()
        if len(parts) == 2 and parts[1].isdigit():
            code = gen_code()
            create_code(code, int(parts[1]))
            await msg.reply_text(f"üé≤ –°–ª—É—á–∞–π–Ω—ã–π –∫–æ–¥ {md_escape(code)} —Å–æ–∑–¥–∞–Ω –Ω–∞ {parts[1]} –±–æ–Ω—É—Å–æ–≤.", parse_mode=ParseMode.MARKDOWN_V2)
        else:
            await msg.reply_text("‚ùå –§–æ—Ä–º–∞—Ç: /gen_auto AMOUNT")
        return

    if text == "/users" and uid in ADMINS:
        users = load_json(USERS_FILE)
        if not users:
            await msg.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
            return
        lines = [f"üÜî {md_escape(k)} ‚Äî {md_escape(str(v))}" for k, v in users.items()]
        await msg.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(lines[:200]), parse_mode=ParseMode.MARKDOWN_V2)
        return

    # default reply
    await msg.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ /start —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")


# -------------------------
# BOOT
# -------------------------
def main():
    ensure_data_files()
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CallbackQueryHandler(cb_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, msg_handler))

    logger.info("Starting bot...")
    app.run_polling()


if __name__ == "__main__":
    if TOKEN == "YOUR_BOT_TOKEN_HERE" or not TOKEN:
        logger.error("TOKEN is not set. Put your bot token into the TOKEN variable before running.")
        print("ERROR: Set your bot token in the script (TOKEN variable).")
    else:
        main()